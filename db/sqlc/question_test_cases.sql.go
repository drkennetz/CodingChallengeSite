// Code generated by sqlc. DO NOT EDIT.
// source: question_test_cases.sql

package db

import (
	"context"
	"encoding/json"
)

const createQuestionTestCase = `-- name: CreateQuestionTestCase :one
INSERT INTO question_test_cases (
    question_id,
    inputs,
    outputs
) VALUES (
    $1, $2, $3
) RETURNING id, question_id, inputs, outputs
`

type CreateQuestionTestCaseParams struct {
	QuestionID int64           `json:"question_id"`
	Inputs     json.RawMessage `json:"inputs"`
	Outputs    json.RawMessage `json:"outputs"`
}

func (q *Queries) CreateQuestionTestCase(ctx context.Context, arg CreateQuestionTestCaseParams) (QuestionTestCase, error) {
	row := q.db.QueryRowContext(ctx, createQuestionTestCase, arg.QuestionID, arg.Inputs, arg.Outputs)
	var i QuestionTestCase
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Inputs,
		&i.Outputs,
	)
	return i, err
}

const deleteAllQuestionTestCasesForQuestion = `-- name: DeleteAllQuestionTestCasesForQuestion :exec
DELETE from question_test_cases
where question_id = $1
`

func (q *Queries) DeleteAllQuestionTestCasesForQuestion(ctx context.Context, questionID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllQuestionTestCasesForQuestion, questionID)
	return err
}

const deleteOneQuestionTestCase = `-- name: DeleteOneQuestionTestCase :exec
DELETE from question_test_cases
where id = $1
`

func (q *Queries) DeleteOneQuestionTestCase(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOneQuestionTestCase, id)
	return err
}

const getAllQuestionTestCases = `-- name: GetAllQuestionTestCases :many
SELECT id, question_id, inputs, outputs from question_test_cases
where question_id = $1
ORDER BY id
`

func (q *Queries) GetAllQuestionTestCases(ctx context.Context, questionID int64) ([]QuestionTestCase, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuestionTestCases, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuestionTestCase{}
	for rows.Next() {
		var i QuestionTestCase
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.Inputs,
			&i.Outputs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSomeQuestionTestCases = `-- name: GetSomeQuestionTestCases :many
SELECT id, question_id, inputs, outputs from question_test_cases
where question_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetSomeQuestionTestCasesParams struct {
	QuestionID int64 `json:"question_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetSomeQuestionTestCases(ctx context.Context, arg GetSomeQuestionTestCasesParams) ([]QuestionTestCase, error) {
	rows, err := q.db.QueryContext(ctx, getSomeQuestionTestCases, arg.QuestionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuestionTestCase{}
	for rows.Next() {
		var i QuestionTestCase
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.Inputs,
			&i.Outputs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOneQuestionTestCase = `-- name: UpdateOneQuestionTestCase :one
UPDATE question_test_cases
SET inputs = $3, outputs = $4
where id = $1 and question_id = $2
RETURNING id, question_id, inputs, outputs
`

type UpdateOneQuestionTestCaseParams struct {
	ID         int64           `json:"id"`
	QuestionID int64           `json:"question_id"`
	Inputs     json.RawMessage `json:"inputs"`
	Outputs    json.RawMessage `json:"outputs"`
}

func (q *Queries) UpdateOneQuestionTestCase(ctx context.Context, arg UpdateOneQuestionTestCaseParams) (QuestionTestCase, error) {
	row := q.db.QueryRowContext(ctx, updateOneQuestionTestCase,
		arg.ID,
		arg.QuestionID,
		arg.Inputs,
		arg.Outputs,
	)
	var i QuestionTestCase
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Inputs,
		&i.Outputs,
	)
	return i, err
}
