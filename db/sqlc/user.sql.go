// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    account_id,
    admin_user,
    username,
    password,
    grade
) VALUES (
  $1, $2, $3, $4, $5  
)  RETURNING id, account_id, admin_user, username, password, grade, created_at, updated_at
`

type CreateUserParams struct {
	AccountID int64    `json:"account_id"`
	AdminUser bool     `json:"admin_user"`
	Username  string   `json:"username"`
	Password  string   `json:"password"`
	Grade     DevLevel `json:"grade"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.AccountID,
		arg.AdminUser,
		arg.Username,
		arg.Password,
		arg.Grade,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AdminUser,
		&i.Username,
		&i.Password,
		&i.Grade,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE from users
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAUser = `-- name: GetAUser :one
SELECT id, account_id, admin_user, username, password, grade, created_at, updated_at FROM users
where id = $1 LIMIT 1
`

func (q *Queries) GetAUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getAUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AdminUser,
		&i.Username,
		&i.Password,
		&i.Grade,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, account_id, admin_user, username, password, grade, created_at, updated_at from users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AdminUser,
			&i.Username,
			&i.Password,
			&i.Grade,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminStatus = `-- name: UpdateAdminStatus :one
UPDATE users
SET admin_user = $2
where id = $1
RETURNING id, account_id, admin_user, username, password, grade, created_at, updated_at
`

type UpdateAdminStatusParams struct {
	ID        int64 `json:"id"`
	AdminUser bool  `json:"admin_user"`
}

func (q *Queries) UpdateAdminStatus(ctx context.Context, arg UpdateAdminStatusParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateAdminStatus, arg.ID, arg.AdminUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AdminUser,
		&i.Username,
		&i.Password,
		&i.Grade,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users
SET password = $2
where username = $1
RETURNING id, account_id, admin_user, username, password, grade, created_at, updated_at
`

type UpdatePasswordParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AdminUser,
		&i.Username,
		&i.Password,
		&i.Grade,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserGrade = `-- name: UpdateUserGrade :one
UPDATE users
SET grade = $2
where id = $1
RETURNING id, account_id, admin_user, username, password, grade, created_at, updated_at
`

type UpdateUserGradeParams struct {
	ID    int64    `json:"id"`
	Grade DevLevel `json:"grade"`
}

func (q *Queries) UpdateUserGrade(ctx context.Context, arg UpdateUserGradeParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserGrade, arg.ID, arg.Grade)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AdminUser,
		&i.Username,
		&i.Password,
		&i.Grade,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE users
SET username = $2
where id = $1
RETURNING id, account_id, admin_user, username, password, grade, created_at, updated_at
`

type UpdateUsernameParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AdminUser,
		&i.Username,
		&i.Password,
		&i.Grade,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
